class OOM {
  static final int SIZE=2*1024*1024;
  public static void main(String[] a) {
    int[] i = new int[SIZE];
   }
}

/***********/

The first example is truly simple – the following Java code 
tries to allocate an array of 2M integers. 
When you compile it and launch with 12MB of 
Java heap space (java -Xmx12m OOM), it fails with the 
java.lang.OutOfMemoryError: Java heap space message.





/****************************/

Memory leak example: memory leak in Java is a situation
 where some objects are no longer used by the
 application but Garbage Collection fails to recognize it. 





class KeylessEntry {
 
   static class Key {
      Integer id;
 
      Key(Integer id) {
         this.id = id;
      }
 
      @Override
      public int hashCode() {
         return id.hashCode();
      }
   }
 
   public static void main(String[] args) {
      Map m = new HashMap();
      while (true)
         for (int i = 0; i < 10000; i++)
            if (!m.containsKey(new Key(i)))
               m.put(new Key(i), "Number:" + i);
   }
}


/**/ It will allocate new memory again and again. So the programme will crash

Solution : Should consider reccursive calls and static memory allocation


